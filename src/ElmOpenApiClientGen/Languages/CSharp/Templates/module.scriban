// <auto-generated>
// This file was generated by {{generationTimestamp}}
// API Description: {{apiDescription}}
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace {{namespaceName}}
{
    /// <summary>
    /// Result type for API operations
    /// </summary>
    public record Result<T, TError>
    {
        public bool IsSuccess { get; init; }
        public T? Value { get; init; }
        public TError? Error { get; init; }
        
        public static Result<T, TError> Success(T value) => new() { IsSuccess = true, Value = value };
        public static Result<T, TError> Failure(TError error) => new() { IsSuccess = false, Error = error };
    }

    /// <summary>
    /// Standard API error response
    /// </summary>
    public record ApiError(
        string Message,
        int? StatusCode = null,
        string? Detail = null
    );

    {{types}}

    {{errorTypes}}

    /// <summary>
    /// HTTP client for {{apiDescription}}
    /// </summary>
    public class {{clientClassName}}
    {
        private readonly HttpClient _httpClient;
        private readonly JsonSerializerOptions _jsonOptions;

        public {{clientClassName}}(HttpClient httpClient)
        {
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            _jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };
        }

        {{requests}}

        private async Task<Result<T, ApiError>> ExecuteAsync<T>(
            HttpRequestMessage request,
            CancellationToken cancellationToken = default)
        {
            try
            {
                var response = await _httpClient.SendAsync(request, cancellationToken);
                
                if (response.IsSuccessStatusCode)
                {
                    if (typeof(T) == typeof(string))
                    {
                        var content = await response.Content.ReadAsStringAsync(cancellationToken);
                        return Result<T, ApiError>.Success((T)(object)content);
                    }
                    else
                    {
                        var result = await response.Content.ReadFromJsonAsync<T>(_jsonOptions, cancellationToken);
                        return result != null 
                            ? Result<T, ApiError>.Success(result)
                            : Result<T, ApiError>.Failure(new ApiError("Deserialization failed", (int)response.StatusCode));
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync(cancellationToken);
                    return Result<T, ApiError>.Failure(new ApiError(
                        $"API call failed with status {response.StatusCode}",
                        (int)response.StatusCode,
                        errorContent
                    ));
                }
            }
            catch (HttpRequestException ex)
            {
                return Result<T, ApiError>.Failure(new ApiError($"HTTP request failed: {ex.Message}"));
            }
            catch (TaskCanceledException ex)
            {
                return Result<T, ApiError>.Failure(new ApiError($"Request cancelled: {ex.Message}"));
            }
            catch (JsonException ex)
            {
                return Result<T, ApiError>.Failure(new ApiError($"JSON parsing failed: {ex.Message}"));
            }
            catch (Exception ex)
            {
                return Result<T, ApiError>.Failure(new ApiError($"Unexpected error: {ex.Message}"));
            }
        }
    }
}
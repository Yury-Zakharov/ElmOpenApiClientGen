openapi: 3.0.0
info:
  title: Sample API
  version: 1.0.0

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

paths:
  /users:
    get:
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: active
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /users/{id}:
    get:
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateUser
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted

  /documents:
    post:
      operationId: createDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '201':
          description: Document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

  /documents/{id}:
    patch:
      operationId: patchDocument
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    Role:
      type: string
      enum: [admin, editor, viewer]

    # Nested object example
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        zipCode:
          type: string
        country:
          type: string
          default: "US"

    # String formats example
    UserMetadata:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        profileUrl:
          type: string
          format: uri

    # OneOf discriminated union example
    ContactInfo:
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum: [email]
            email:
              type: string
              format: email
          required: [type, email]
        - type: object
          properties:
            type:
              type: string
              enum: [phone]
            phone:
              type: string
            countryCode:
              type: string
          required: [type, phone]

    # AllOf composition example (inheritance-like)
    BaseEntity:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # AllOf with composition - extends BaseEntity
    Document:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            title:
              type: string
            content:
              type: string
            author:
              type: string

    # AnyOf example - flexible payment method
    PaymentMethod:
      anyOf:
        - type: object
          properties:
            type:
              type: string
              enum: [credit_card]
            cardNumber:
              type: string
            expiryDate:
              type: string
          required: [type, cardNumber, expiryDate]
        - type: object
          properties:
            type:
              type: string
              enum: [paypal]
            email:
              type: string
              format: email
          required: [type, email]
        - type: object
          properties:
            type:
              type: string
              enum: [bank_transfer]
            accountNumber:
              type: string
            routingNumber:
              type: string
          required: [type, accountNumber]

    # Complex AllOf with multiple inheritance
    AdminUser:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            email:
              type: string
              format: email
            role:
              $ref: '#/components/schemas/Role'
        - type: object
          properties:
            permissions:
              type: array
              items:
                type: string
            lastLogin:
              type: string
              format: date-time
              nullable: true

    # Reference-based OneOf example
    Cat:
      type: object
      properties:
        type:
          type: string
          enum: [cat]
        name:
          type: string
        meowSound:
          type: string
      required: [type, name]

    Dog:
      type: object
      properties:
        type:
          type: string
          enum: [dog]
        name:
          type: string
        barkSound:
          type: string
      required: [type, name]

    # OneOf with references (not inline schemas)
    Pet:
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'

    # User with nested objects and advanced features
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          nullable: true
        active:
          type: boolean
        tags:
          type: array
          items:
            type: string
        role:
          $ref: '#/components/schemas/Role'
        roles:
          type: array
          items: 
            $ref: '#/components/schemas/Role'
        # Nested object reference
        address:
          $ref: '#/components/schemas/Address'
        # Optional nested object
        billingAddress:
          $ref: '#/components/schemas/Address'
          nullable: true
        # Metadata with formats
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        # OneOf field
        contactInfo:
          $ref: '#/components/schemas/ContactInfo'
        # Inline nested object
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark]
            notifications:
              type: boolean
            language:
              type: string
              default: "en"

    # Error response schemas
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
      required: [error, message]

    ValidationError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
      required: [error, message, details]

